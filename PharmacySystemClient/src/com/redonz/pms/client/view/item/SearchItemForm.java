/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.redonz.pms.client.view.item;

//<editor-fold defaultstate="collapsed" desc="Import Statemnts">
import com.redonz.pms.client.connector.ServerConnector;
import com.redonz.pms.client.observer.BatchItemObserver;
import com.redonz.pms.client.view.customer.AddCustomerForm;
import com.redonz.pms.common.model.BatchItem;
import com.redonz.pms.common.model.Category;
import com.redonz.pms.common.model.Item;
import com.redonz.pms.common.model.ItemDetail;
import com.redonz.pms.common.model.ObserverTO;
import java.awt.Color;
import java.awt.Component;
import java.awt.HeadlessException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.ConnectException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.autocomplete.ObjectToStringConverter;
//</editor-fold>

/**
 *
 * @author DI_SH
 */
public class SearchItemForm extends javax.swing.JDialog {

    private ArrayList<Integer> integers = new ArrayList<>();
    private int searchIndex;
    private DefaultTableModel itemDTM;
    private DefaultTableModel batchDTM;
    private boolean itemLoaded;
    private SimpleDateFormat dateFormat;
    private BatchItemObserver batchItemObserver;
    private int margin = -2;
    private int updateRow = -1;

    /**
     * Creates new form SearchItemForm
     */
    public SearchItemForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(null);
        itemDTM = (DefaultTableModel) itemTable.getModel();
        batchDTM = (DefaultTableModel) batchlTable.getModel();
        try {
            fillCategoryComboBox();
        } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
            if (ex.getMessage().contains("Connection refused to host")) {
                JOptionPane.showMessageDialog(this, "Connection has corrupt or no server started....", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        toExpDatePicker.setFormats(dateFormat);
        fromExpDatePicker.setFormats(dateFormat);
        AutoCompleteDecorator.decorate(categoryComboBox, ObjectToStringConverter.DEFAULT_IMPLEMENTATION);
        try {
            batchItemObserver = new BatchItemObserver(this);
            ServerConnector.getServerConnector().getBatchItemController().addBatchItemObserver(batchItemObserver);
            batchItemObserver.setChanged(false);
        } catch (RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        itemTable.setDefaultRenderer(Object.class, new MyRendererClass());
        batchlTable.setDefaultRenderer(Object.class, new MyRendererClass2());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        barcodeLabel = new javax.swing.JLabel();
        barcodeTextField = new javax.swing.JTextField();
        batchNoLabel = new javax.swing.JLabel();
        batchNoTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        itemNameTextField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        fromExpDatePicker = new org.jdesktop.swingx.JXDatePicker();
        msgLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        toExpDatePicker = new org.jdesktop.swingx.JXDatePicker();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        itemTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        batchlTable = new javax.swing.JTable();
        availableCheckBox = new javax.swing.JCheckBox();
        categoryComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainPanel.setBackground(new java.awt.Color(247, 247, 247));

        titleLabel.setBackground(new java.awt.Color(255, 255, 255));
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(102, 102, 102));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Search Items");
        titleLabel.setOpaque(true);

        closeButton.setBackground(new java.awt.Color(255, 153, 153));
        closeButton.setText("Close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        barcodeLabel.setText("Barcode : ");

        barcodeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                barcodeTextFieldActionPerformed(evt);
            }
        });
        barcodeTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                barcodeTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                barcodeTextFieldFocusLost(evt);
            }
        });
        barcodeTextField.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                barcodeTextFieldCaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                barcodeTextFieldInputMethodTextChanged(evt);
            }
        });
        barcodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                barcodeTextFieldKeyReleased(evt);
            }
        });

        batchNoLabel.setText("Batch No :");

        batchNoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batchNoTextFieldActionPerformed(evt);
            }
        });
        batchNoTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                batchNoTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                batchNoTextFieldFocusLost(evt);
            }
        });
        batchNoTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                batchNoTextFieldKeyReleased(evt);
            }
        });

        jLabel2.setText("Exp Date : ");

        jLabel3.setText("Item Name : ");

        itemNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNameTextFieldActionPerformed(evt);
            }
        });
        itemNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                itemNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                itemNameTextFieldFocusLost(evt);
            }
        });
        itemNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                itemNameTextFieldKeyReleased(evt);
            }
        });

        jLabel4.setText("Category :");

        searchButton.setBackground(new java.awt.Color(153, 248, 224));
        searchButton.setText("Search");
        searchButton.setEnabled(false);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        fromExpDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromExpDatePickerActionPerformed(evt);
            }
        });
        fromExpDatePicker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fromExpDatePickerFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fromExpDatePickerFocusLost(evt);
            }
        });

        msgLabel.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        msgLabel.setForeground(new java.awt.Color(255, 0, 0));

        jLabel5.setText("From : ");

        toExpDatePicker.setEnabled(false);
        toExpDatePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toExpDatePickerActionPerformed(evt);
            }
        });
        toExpDatePicker.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                toExpDatePickerFocusLost(evt);
            }
        });

        jLabel6.setText("To : ");

        jPanel2.setBackground(new java.awt.Color(247, 247, 247));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Item Detail"));

        itemTable.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        itemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Barcode", "Description", "Re-Order-Level", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemTable.setRowHeight(25);
        itemTable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        itemTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                itemTableMouseClicked(evt);
            }
        });
        itemTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(itemTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel1.setBackground(new java.awt.Color(247, 247, 247));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Batch Details"));

        batchlTable.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        batchlTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch No", "Unit Price", "Qty", "Exp. Date", "barcode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        batchlTable.setFocusable(false);
        batchlTable.setRowHeight(25);
        batchlTable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        batchlTable.getTableHeader().setReorderingAllowed(false);
        batchlTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                batchlTableMouseClicked(evt);
            }
        });
        batchlTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                batchlTableKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(batchlTable);
        batchlTable.getColumnModel().getColumn(4).setMinWidth(0);
        batchlTable.getColumnModel().getColumn(4).setMaxWidth(0);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 505, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        availableCheckBox.setSelected(true);
        availableCheckBox.setText("Available Batches Only");

        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        categoryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryComboBoxItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(batchNoLabel)
                        .addGap(15, 15, 15)
                        .addComponent(batchNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jLabel2)
                        .addGap(17, 17, 17)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fromExpDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toExpDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 3, Short.MAX_VALUE)
                                .addComponent(availableCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(405, 405, 405)
                                .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(barcodeLabel)
                                .addGap(18, 18, 18)
                                .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(categoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(58, 58, 58))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(barcodeLabel)
                    .addComponent(barcodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(itemNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(batchNoLabel)
                        .addComponent(batchNoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fromExpDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(toExpDatePicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchButton)
                    .addComponent(availableCheckBox, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(msgLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeButton)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered
        closeButton.setBackground(new Color(255, 102, 102));
    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited
        closeButton.setBackground(new Color(255, 153, 153));
    }//GEN-LAST:event_closeButtonMouseExited

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void barcodeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_barcodeTextFieldActionPerformed
    }//GEN-LAST:event_barcodeTextFieldActionPerformed

    private void barcodeTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeTextFieldFocusGained
        searchIndex = 1;
    }//GEN-LAST:event_barcodeTextFieldFocusGained

    private void barcodeTextFieldCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_barcodeTextFieldCaretPositionChanged
    }//GEN-LAST:event_barcodeTextFieldCaretPositionChanged

    private void barcodeTextFieldInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_barcodeTextFieldInputMethodTextChanged
    }//GEN-LAST:event_barcodeTextFieldInputMethodTextChanged

    private void barcodeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeTextFieldKeyReleased
        if (evt.getKeyCode() != 10) {
            try {
                String barcode = barcodeTextField.getText();

                ArrayList<Item> items = ServerConnector.getServerConnector().getItemController().searchItemLike(barcode);
                fillItemTable(items);
            } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            itemTable.requestFocus();
        }
    }//GEN-LAST:event_barcodeTextFieldKeyReleased

    private void batchNoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batchNoTextFieldActionPerformed
    }//GEN-LAST:event_batchNoTextFieldActionPerformed

    private void batchNoTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_batchNoTextFieldKeyReleased
        String batchNo = batchNoTextField.getText();
        try {

            ItemDetail itemDetail = null;
            if (availableCheckBox.isSelected()) {
                itemDetail = ServerConnector.getServerConnector().getBatchItemController().getAvailableItemDetailForBatchN0(batchNo);
            } else {
                itemDetail = ServerConnector.getServerConnector().getBatchItemController().getItemDetailForBatchN0(batchNo);
            }
            if (itemDetail != null) {
                itemDTM.setRowCount(0);
                Item item = itemDetail.getItem();
                Category category = ServerConnector.getServerConnector().getCategoryController().searchCategory(item.getCategoryId());
                if (category != null) {

                    itemDTM.addRow(new Object[]{item.getBarcode(), item.getDescription(), item.getReorderlevel(), category.getDescription()});
                } else {
                    itemDTM.addRow(new Object[]{item.getBarcode(), item.getDescription(), item.getReorderlevel()});
                }
                fillBatchItemTable(itemDetail.getBatchItemList());
            }
        } catch (SQLException | ClassNotFoundException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            if (ex instanceof ConnectException && ex.getMessage().contains("Connection refused to host")) {
                try {
                    ItemDetail itemDetail = ServerConnector.getNewServerConnector().getBatchItemController().getItemDetailForBatchN0(batchNo);
                    if (itemDetail != null) {
                        itemDTM.setRowCount(0);
                        Item item = itemDetail.getItem();
                        Category category = ServerConnector.getNewServerConnector().getCategoryController().searchCategory(item.getCategoryId());
                        if (category != null) {

                            itemDTM.addRow(new Object[]{item.getBarcode(), item.getDescription(), item.getReorderlevel(), category.getDescription()});
                        } else {
                            itemDTM.addRow(new Object[]{item.getBarcode(), item.getDescription(), item.getReorderlevel()});
                        }
                        fillBatchItemTable(itemDetail.getBatchItemList());
                    }
                } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex1) {
                    Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (FileNotFoundException ex1) {
                    Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex1);
                } catch (IOException ex1) {
                    Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_batchNoTextFieldKeyReleased

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String fromDate = dateFormat.format(fromExpDatePicker.getDate());
        String toDate = dateFormat.format(toExpDatePicker.getDate());
        try {


            ArrayList<ItemDetail> itemDetails = null;
            if (availableCheckBox.isSelected()) {
                itemDetails = ServerConnector.getServerConnector().getBatchItemController().getAvailableItemDetailForExpDateRange(fromDate, toDate);
            } else {
                itemDetails = ServerConnector.getServerConnector().getBatchItemController().getItemDetailForExpDateRange(fromDate, toDate);
            }
            if (!itemDetails.isEmpty()) {
                ArrayList<Item> itemList = new ArrayList<>();

                for (ItemDetail itemDetail : itemDetails) {
                    itemList.add(itemDetail.getItem());
                }
                fillItemTable(itemList);
                for (ItemDetail itemDetail : itemDetails) {
                    addToBatchItemTable(itemDetail.getBatchItemList());
                }
            } else {
                JOptionPane.showMessageDialog(this, "<html>No batched found for exp date between <strong>" + fromDate + "</strong> and <strong>" + toDate + "</strong></html>");
            }
        } catch (NotBoundException | MalformedURLException | SQLException | ClassNotFoundException | RemoteException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void fromExpDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromExpDatePickerActionPerformed
        Date expDate = fromExpDatePicker.getDate();
        if (expDate != null) {
            toExpDatePicker.setEnabled(true);
        } else {
            toExpDatePicker.setEnabled(false);
        }
    }//GEN-LAST:event_fromExpDatePickerActionPerformed

    private void toExpDatePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toExpDatePickerActionPerformed
        Date toExpDate = toExpDatePicker.getDate();
        Date fromExpDate = fromExpDatePicker.getDate();
        boolean before = fromExpDate.before(toExpDate);
        if (!before) {
            searchButton.setEnabled(false);
            msgLabel.setText("Invalid date range....!!!");
        } else {
            searchButton.setEnabled(true);
            msgLabel.setText("");
            searchButton.doClick();
        }
    }//GEN-LAST:event_toExpDatePickerActionPerformed

    private void itemTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_itemTableMouseClicked

        int selectedRow = itemTable.getSelectedRow();
        String barcode = (String) itemTable.getValueAt(selectedRow, 0);
        batchesForItem(barcode);
    }//GEN-LAST:event_itemTableMouseClicked

    private void itemTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemTableKeyPressed
        int selectedRow = itemTable.getSelectedRow();

    }//GEN-LAST:event_itemTableKeyPressed

    private void batchlTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_batchlTableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_batchlTableKeyPressed

    private void itemNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemNameTextFieldFocusGained
        searchIndex = 2;
//        itemNameTextField.setEditable(true);
    }//GEN-LAST:event_itemNameTextFieldFocusGained

    private void batchNoTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_batchNoTextFieldFocusGained
        searchIndex = 4;
    }//GEN-LAST:event_batchNoTextFieldFocusGained

    private void itemNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_itemNameTextFieldFocusLost
//        itemNameTextField.setEditable(false);
        if (itemNameTextField.getText().isEmpty()) {
            searchIndex = 0;
        }
    }//GEN-LAST:event_itemNameTextFieldFocusLost

    private void barcodeTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_barcodeTextFieldFocusLost
        if (barcodeTextField.getText().isEmpty()) {
            searchIndex = 0;
        }
    }//GEN-LAST:event_barcodeTextFieldFocusLost

    private void batchNoTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_batchNoTextFieldFocusLost
        if (batchNoTextField.getText().isEmpty()) {
            searchIndex = 0;
        }
    }//GEN-LAST:event_batchNoTextFieldFocusLost

    private void fromExpDatePickerFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromExpDatePickerFocusGained
        searchIndex = 5;

    }//GEN-LAST:event_fromExpDatePickerFocusGained

    private void fromExpDatePickerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fromExpDatePickerFocusLost
        if (fromExpDatePicker.getDate() == null) {
            searchIndex = 0;
            toExpDatePicker.setEnabled(false);
        }
    }//GEN-LAST:event_fromExpDatePickerFocusLost

    private void toExpDatePickerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_toExpDatePickerFocusLost
        if (toExpDatePicker.getDate() == null) {
            Date date = fromExpDatePicker.getDate();
            Calendar instance = Calendar.getInstance();
            instance.setTime(date);
            instance.add(Calendar.DAY_OF_MONTH, 7);

            toExpDatePicker.setDate(instance.getTime());
            toExpDatePicker.revalidate();
        }
    }//GEN-LAST:event_toExpDatePickerFocusLost

    private void itemNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNameTextFieldActionPerformed
    }//GEN-LAST:event_itemNameTextFieldActionPerformed

    private void itemNameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemNameTextFieldKeyReleased
        try {
            String desc = itemNameTextField.getText();
            ArrayList<Item> itemsByDescription = ServerConnector.getServerConnector().getItemController().getItemsByDescription(desc);
            fillItemTable(itemsByDescription);
        } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_itemNameTextFieldKeyReleased

    private void categoryComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryComboBoxItemStateChanged
        if (itemLoaded && categoryComboBox.getSelectedIndex() != 0) {
            String categoryId = ((String) categoryComboBox.getSelectedItem()).split(" - ")[0];
            try {
                ArrayList<Item> itemsByCategory = ServerConnector.getServerConnector().getItemController().getItemsByCategory(categoryId);
                fillItemTable(itemsByCategory);

            } catch (NotBoundException | MalformedURLException | RemoteException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }//GEN-LAST:event_categoryComboBoxItemStateChanged

    private void batchlTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_batchlTableMouseClicked
        int selectedRow = batchlTable.getSelectedRow();
        String barcode = (String) batchlTable.getValueAt(selectedRow, 4);
        for (int i = 0; i < itemTable.getRowCount(); i++) {
            if (itemTable.getValueAt(i, 0).toString().equals(barcode)) {
                itemTable.setRowSelectionInterval(i, i);
                break;
            }
        }
    }//GEN-LAST:event_batchlTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            ServerConnector.getServerConnector().getBatchItemController().removeObserver(batchItemObserver);
        } catch (RemoteException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotBoundException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MalformedURLException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SearchItemForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                SearchItemForm dialog = new SearchItemForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox availableCheckBox;
    private javax.swing.JLabel barcodeLabel;
    private javax.swing.JTextField barcodeTextField;
    private javax.swing.JLabel batchNoLabel;
    private javax.swing.JTextField batchNoTextField;
    private javax.swing.JTable batchlTable;
    private javax.swing.JComboBox categoryComboBox;
    private javax.swing.JButton closeButton;
    private org.jdesktop.swingx.JXDatePicker fromExpDatePicker;
    private javax.swing.JTextField itemNameTextField;
    private javax.swing.JTable itemTable;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JButton searchButton;
    private javax.swing.JLabel titleLabel;
    private org.jdesktop.swingx.JXDatePicker toExpDatePicker;
    // End of variables declaration//GEN-END:variables

    private void fillBatchItemTable(ArrayList<BatchItem> batchItems) {
        batchDTM.setRowCount(0);
        for (BatchItem batchItem : batchItems) {
            batchDTM.addRow(new Object[]{batchItem.getBatchNo(), batchItem.getUnitPrice(), batchItem.getQty(), batchItem.getExpDate(), batchItem.getBarCode()});
        }
    }

    private void addToBatchItemTable(ArrayList<BatchItem> batchItems) {

        for (BatchItem batchItem : batchItems) {

            batchDTM.addRow(new Object[]{batchItem.getBatchNo(), batchItem.getUnitPrice(), batchItem.getQty(), batchItem.getExpDate(), batchItem.getBarCode()});

        }


    }

    private void fillItemTable(ArrayList<Item> items) throws RemoteException, NotBoundException, MalformedURLException, SQLException, ClassNotFoundException , FileNotFoundException, IOException{
        itemDTM.setRowCount(0);
        batchDTM.setRowCount(0);
        for (Item item : items) {
            Category category = ServerConnector.getServerConnector().getCategoryController().searchCategory(item.getCategoryId());
            if (category != null) {

                itemDTM.addRow(new Object[]{item.getBarcode(), item.getDescription(), item.getReorderlevel(), category.getDescription()});
            } else {
                itemDTM.addRow(new Object[]{item.getBarcode(), item.getDescription(), item.getReorderlevel()});
            }

        }
    }

    private void fillCategoryComboBox() throws RemoteException, NotBoundException, MalformedURLException, SQLException, ClassNotFoundException , FileNotFoundException, IOException{
        itemLoaded = false;

        ArrayList<Category> allCategories = ServerConnector.getServerConnector().getCategoryController().getAllCategories();

        categoryComboBox.removeAllItems();
        categoryComboBox.addItem("<select category>");
        for (Category category : allCategories) {
            categoryComboBox.addItem(category.getCategoryId() + " - " + category.getDescription());
        }
        itemLoaded = true;
    }

    public void notifyChanges(ObserverTO observerTO) {
        if (observerTO.getObj() instanceof ArrayList) {
            ArrayList<BatchItem> batchItems = (ArrayList<BatchItem>) observerTO.getObj();
            ArrayList<BatchItem> existBatchItems = new ArrayList<>();
            boolean itemExist = false;
            for (BatchItem batchItem : batchItems) {
                for (int i = 0; i < itemTable.getRowCount(); i++) {
                    if (itemTable.getValueAt(i, 0).equals(batchItem.getBarCode())) {
                        itemExist = true;
                        integers.add(i);
                        existBatchItems.add(batchItem);
                        break;
                    }
                }
            }
            if (itemExist) {
                itemTable.repaint();
                JOptionPane.showMessageDialog(this, batchItems + " " + observerTO.getAction() + " ...");
                switch (observerTO.getAction()) {
                    case ObserverTO.ADD:
                        margin = batchlTable.getRowCount() - 1;
                        for (BatchItem batchItem : existBatchItems) {
                            batchDTM.addRow(new Object[]{batchItem.getBatchNo(), batchItem.getUnitPrice(), batchItem.getQty(), batchItem.getExpDate(), batchItem.getBarCode()});
                        }
                        batchlTable.repaint();
                        break;
                    case ObserverTO.UPDATE:
                        for (BatchItem batchItem : existBatchItems) {
                            if (itemTable.getValueAt(itemTable.getSelectedRow(), 0).equals(batchItem.getBarCode())) {
                                batchesForItem(batchItem.getBarCode());
                                for (int i = 0; i < batchlTable.getRowCount(); i++) {
                                    if (batchlTable.getValueAt(i, 0).equals(batchItem.getBatchNo())) {
                                        updateRow = i;
                                        break;
                                    }
                                }
                                break;
                            }
                        }
                        batchlTable.repaint();
                        //                } else if (observerTO.getAction().equals(ObserverTO.DELETE)) {
                        break;
                }
            }
            integers.clear();
            margin = -2;
        } else if (observerTO.getObj() instanceof BatchItem) {
            BatchItem batchItem = (BatchItem) observerTO.getObj();
            switch (observerTO.getAction()) {
                case ObserverTO.UPDATE:
                    if (itemTable.getValueAt(itemTable.getSelectedRow(), 0).equals(batchItem.getBarCode())) {
                        batchesForItem(batchItem.getBarCode());
                        for (int i = 0; i < batchlTable.getRowCount(); i++) {
                            if (batchlTable.getValueAt(i, 0).equals(batchItem.getBatchNo())) {
                                updateRow = i;
                                break;
                            }
                        }
                    }
                    break;
                case ObserverTO.ADD:
                    margin = batchlTable.getRowCount() - 1;
                    batchDTM.addRow(new Object[]{batchItem.getBatchNo(), batchItem.getUnitPrice(), batchItem.getQty(), batchItem.getExpDate(), batchItem.getBarCode()});
                    break;

            }
            integers.clear();
            margin = -2;
        }
    }

    private void batchesForItem(String barcode) throws HeadlessException {

        try {
            ArrayList<BatchItem> batchesByBarcode = null;
            if (availableCheckBox.isSelected()) {
                batchesByBarcode = ServerConnector.getServerConnector().getBatchItemController().getAvailableBatchesByBarcode(barcode);
            } else {
                batchesByBarcode = ServerConnector.getServerConnector().getBatchItemController().getBatchesByBarcode(barcode);
            }
            fillBatchItemTable(batchesByBarcode);
            if (batchlTable.getRowCount() == 0) {
                JOptionPane.showMessageDialog(this, "No Batches available....");
            }
        } catch (SQLException | ClassNotFoundException | RemoteException | NotBoundException | MalformedURLException ex) {
            Logger.getLogger(SearchItemForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class MyRendererClass extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setBackground(null);
            setForeground(Color.BLACK);
            Component tableCellRendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
            if (integers.contains(row)) {
                setBackground(new Color(255, 102, 102));
                setForeground(Color.WHITE);
            }
            return tableCellRendererComponent;
        }
    }

    class MyRendererClass2 extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setBackground(null);
            setForeground(Color.BLACK);
            Component tableCellRendererComponent = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column); //To change body of generated methods, choose Tools | Templates.
            if (margin > -1 && row > margin) {
                setBackground(new Color(51, 204, 255));
                setForeground(Color.WHITE);
            } else if (updateRow == row) {
                setBackground(new Color(51, 204, 255));
                setForeground(Color.WHITE);
            }
            return tableCellRendererComponent;
        }
    }
}
