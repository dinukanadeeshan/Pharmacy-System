/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.redonz.pms.client.view.order;

import com.redonz.pms.client.connector.ServerConnector;
import com.redonz.pms.client.others.Validation;
import com.redonz.pms.client.view.customer.AddCustomerForm;
import com.redonz.pms.common.model.Customer;
import com.redonz.pms.common.model.CustomerOrderDetail;
import com.redonz.pms.common.model.HoldOrder;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DI_SH
 */
public class ViewHoldOrderForm extends javax.swing.JDialog {

    private boolean fillingCustomerCompleted;
    private DefaultTableModel orderDTM;
    private DefaultTableModel orderDetailDTM;
    private ArrayList<HoldOrder> orderList;
    private MakeInvoiceForm invoiceForm;

    /**
     * Creates new form ViewHoldOrderForm
     */
    public ViewHoldOrderForm(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        invoiceForm = (MakeInvoiceForm) parent;
        orderDTM = (DefaultTableModel) orderTable.getModel();
        orderDetailDTM = (DefaultTableModel) orderDetailTable.getModel();

        try {
            fillCustomerComboBox();
        } catch (NotBoundException | MalformedURLException | SQLException | ClassNotFoundException | RemoteException ex) {
            Logger.getLogger(ViewHoldOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        customerLabel = new javax.swing.JLabel();
        orderIdTextField = new javax.swing.JTextField();
        orderIdLabel = new javax.swing.JLabel();
        customerComboBox = new javax.swing.JComboBox();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderDetailTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        viewAllButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(247, 247, 247));

        titleLabel.setBackground(new java.awt.Color(255, 255, 255));
        titleLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(102, 102, 102));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("View Hold Orders");
        titleLabel.setOpaque(true);

        closeButton.setBackground(new java.awt.Color(255, 153, 153));
        closeButton.setText("Close");
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeButtonMouseExited(evt);
            }
        });
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        customerLabel.setText("Customer :");

        orderIdTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderIdTextFieldActionPerformed(evt);
            }
        });
        orderIdTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                orderIdTextFieldKeyReleased(evt);
            }
        });

        orderIdLabel.setText("Hold Order No :");

        customerComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        customerComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customerComboBoxItemStateChanged(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(247, 247, 247));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Order Details"));

        orderDetailTable.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        orderDetailTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch No", "Unit Price", "Qty", "Exp. Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderDetailTable.setColumnSelectionAllowed(true);
        orderDetailTable.setFocusable(false);
        orderDetailTable.setRowHeight(25);
        orderDetailTable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        orderDetailTable.getTableHeader().setReorderingAllowed(false);
        orderDetailTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderDetailTableKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(orderDetailTable);
        orderDetailTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(247, 247, 247));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Orders"));

        orderTable.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CustomerID", "Order ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        orderTable.setRowHeight(25);
        orderTable.setSelectionBackground(new java.awt.Color(0, 153, 153));
        orderTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                orderTableMouseClicked(evt);
            }
        });
        orderTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                orderTableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(orderTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        viewAllButton.setText("View All");
        viewAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllButtonActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(titleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))))
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(customerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(orderIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewAllButton)
                .addGap(62, 62, 62))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderIdLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customerComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewAllButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseEntered
        closeButton.setBackground(new Color(255, 102, 102));
    }//GEN-LAST:event_closeButtonMouseEntered

    private void closeButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseExited
        closeButton.setBackground(new Color(255, 153, 153));
    }//GEN-LAST:event_closeButtonMouseExited

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void orderTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderTableKeyPressed
        int selectedRow = orderTable.getSelectedRow();
        HoldOrder ho = orderList.get(selectedRow);
        if (evt.getKeyCode() == KeyEvent.VK_DOWN || evt.getKeyCode() == KeyEvent.VK_UP) {


            ArrayList<CustomerOrderDetail> customerOrderDetailList = ho.getCustomerOrderDetailList();
            orderDetailDTM.setRowCount(0);

            for (CustomerOrderDetail customerOrderDetail : customerOrderDetailList) {
                String batchNo = customerOrderDetail.getBatchNo();

                double unitprice = customerOrderDetail.getUnitprice();
                double qty = customerOrderDetail.getQty();
                String expDate = customerOrderDetail.getExpDate();
                orderDetailDTM.addRow(new Object[]{batchNo, unitprice, qty, expDate});
            }


        }
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                invoiceForm.setOrderDetail(ho);
                ServerConnector.getServerConnector().getHoldOrderController().removeHoldOrder(ho);
            } catch (SQLException | NotBoundException | ClassNotFoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ViewHoldOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            dispose();
        }
    }//GEN-LAST:event_orderTableKeyPressed

    private void orderDetailTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderDetailTableKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_orderDetailTableKeyPressed

    private void customerComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customerComboBoxItemStateChanged
        if (fillingCustomerCompleted) {
            try {

                orderList = ServerConnector.getServerConnector().getHoldOrderController().getHoldOrderByCustId(((Customer) customerComboBox.getSelectedItem()).getCustId());
                orderDTM.setRowCount(0);
                orderDetailDTM.setRowCount(0);
                for (HoldOrder holdOrder : orderList) {
                    orderDTM.addRow(new Object[]{holdOrder.getCustId(), holdOrder.getHoldOrderId()});
                }
                if (orderList.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "No hold orders....");
                }
            } catch (NotBoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ViewHoldOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_customerComboBoxItemStateChanged

    private void viewAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllButtonActionPerformed
        try {
            orderList = ServerConnector.getServerConnector().getHoldOrderController().getAllOrders();
            orderDTM.setRowCount(0);
            orderDetailDTM.setRowCount(0);
            for (HoldOrder holdOrder : orderList) {
                orderDTM.addRow(new Object[]{holdOrder.getCustId(), holdOrder.getHoldOrderId()});
            }
            if (orderList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hold orders....");
            }
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ViewHoldOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewAllButtonActionPerformed

    private void orderIdTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderIdTextFieldActionPerformed
        int orderId = Integer.parseInt(orderIdTextField.getText());
        try {
            HoldOrder holdOrder = ServerConnector.getServerConnector().getHoldOrderController().getHoldOrder(orderId);
            orderDTM.setRowCount(0);
            orderDetailDTM.setRowCount(0);
            orderDTM.addRow(new Object[]{holdOrder.getCustId(), holdOrder.getHoldOrderId()});
            ArrayList<CustomerOrderDetail> customerOrderDetailList = holdOrder.getCustomerOrderDetailList();
            for (CustomerOrderDetail customerOrderDetail : customerOrderDetailList) {
                String batchNo = customerOrderDetail.getBatchNo();
                double unitprice = customerOrderDetail.getUnitprice();
                double qty = customerOrderDetail.getQty();
                String expDate = customerOrderDetail.getExpDate();
                orderDetailDTM.addRow(new Object[]{batchNo, unitprice, qty, expDate});
            }
            if (orderList.isEmpty()) {
                JOptionPane.showMessageDialog(this, "No hold orders....");
            }
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(ViewHoldOrderForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_orderIdTextFieldActionPerformed

    private void orderTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_orderTableMouseClicked

        int selectedRow = orderTable.getSelectedRow();
        HoldOrder ho = orderList.get(selectedRow);
        ArrayList<CustomerOrderDetail> customerOrderDetailList = ho.getCustomerOrderDetailList();
        orderDetailDTM.setRowCount(0);

        for (CustomerOrderDetail customerOrderDetail : customerOrderDetailList) {
            String batchNo = customerOrderDetail.getBatchNo();

            double unitprice = customerOrderDetail.getUnitprice();
            double qty = customerOrderDetail.getQty();
            String expDate = customerOrderDetail.getExpDate();
            orderDetailDTM.addRow(new Object[]{batchNo, unitprice, qty, expDate});
        }
        if (evt.getClickCount() == 2) {
            try {
                invoiceForm.setOrderDetail(ho);
                ServerConnector.getServerConnector().getHoldOrderController().removeHoldOrder(ho);
            } catch (SQLException | NotBoundException | ClassNotFoundException | MalformedURLException | RemoteException ex) {
                Logger.getLogger(ViewHoldOrderForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (FileNotFoundException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AddCustomerForm.class.getName()).log(Level.SEVERE, null, ex);
        }
            dispose();

        }
    }//GEN-LAST:event_orderTableMouseClicked

    private void orderIdTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_orderIdTextFieldKeyReleased
        Validation.validateBarcodeText(orderIdTextField);
    }//GEN-LAST:event_orderIdTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewHoldOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewHoldOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewHoldOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewHoldOrderForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ViewHoldOrderForm dialog = new ViewHoldOrderForm(new MakeInvoiceForm(null, false), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JComboBox customerComboBox;
    private javax.swing.JLabel customerLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTable orderDetailTable;
    private javax.swing.JLabel orderIdLabel;
    private javax.swing.JTextField orderIdTextField;
    private javax.swing.JTable orderTable;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton viewAllButton;
    // End of variables declaration//GEN-END:variables

    private void fillCustomerComboBox() throws NotBoundException, MalformedURLException, SQLException, ClassNotFoundException, RemoteException , FileNotFoundException, IOException{
        fillingCustomerCompleted = false;
        customerComboBox.removeAllItems();
        customerComboBox.addItem("<select Customer>");
        ArrayList<Customer> allCustomers = ServerConnector.getServerConnector().getCustomerController().getAllCustomers();
        for (Customer customer : allCustomers) {
            customerComboBox.addItem(customer);
        }
        fillingCustomerCompleted = true;

    }
}
