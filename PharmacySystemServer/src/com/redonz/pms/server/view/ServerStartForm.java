/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.redonz.pms.server.view;

import com.mysql.jdbc.exceptions.jdbc4.CommunicationsException;
import com.redonz.pms.server.db.DBConnection;
import com.redonz.pms.server.factoryimpl.RemoteFactoryImpl;
import com.redonz.pms.server.serverutilities.ServerStart;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.sql.SQLException;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author DI_SH
 */
public class ServerStartForm extends javax.swing.JFrame {

    private Registry pharmacyServerRegistry;
    private boolean isServerStarted;

    /**
     * Creates new form ServerStartForm
     */
    public ServerStartForm() {
//        try {
//            UIManager.setLookAndFeel(new SubstanceOfficeBlack2007LookAndFeel());
//        } catch (UnsupportedLookAndFeelException ex) {
//            Logger.getLogger(ServerStart.class.getName()).log(Level.SEVERE, null, ex);
//        }
        initComponents();

        progressBar.setVisible(false);
        msgLabel.setVisible(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        msgLabel = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        busyLabel = new org.jdesktop.swingx.JXBusyLabel();
        jLabel1 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Pharmacy System Server");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        progressBar.setMaximum(50);

        msgLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        msgLabel.setForeground(new java.awt.Color(51, 51, 51));
        msgLabel.setText("Server starting.... Please wait...");

        cancelButton.setText("Close");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        busyLabel.setForeground(new java.awt.Color(51, 51, 51));
        busyLabel.setText("Server is not initialized...");
        busyLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(busyLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cancelButton)))
                        .addGap(11, 11, 11)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(busyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(startButton))
                .addGap(5, 5, 5)
                .addComponent(msgLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if (isServerStarted) {
            if (JOptionPane.showConfirmDialog(this, "Server is running... Do you want to switch off & close?", "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        if (!isServerStarted) {
            busyLabel.setText("Server is starting...");
            progressBar.setValue(0);
            progressBar.setVisible(true);
            msgLabel.setVisible(true);
            startButton.setEnabled(false);
            new Thread() {
                private int i;

                @Override
                public void run() {
                    System.out.println("a");
                    Random r = new Random();
                    for (; i < 50; i++) {

                        progressBar.setValue(i);

                        switch (i) {
                            case 34:
                                checkDatabase();
                                break;
                            case 10:
                                msgLabel.setText("Initialize Server Registry...");
                                break;
                            case 15:
                                initializeRegistry();
                                break;
                            case 19:
                                msgLabel.setText("Server starting... Please wait...");
                                break;
                            case 30:
                                msgLabel.setText("Checking Database...");
                                break;
                            case 40:
                                msgLabel.setText("Server starting... Please wait...");
                                break;
                        }
                        try {
                            Thread.sleep(r.nextInt(120) + 5);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    startButton.setEnabled(true);
                    startButton.setText("Stop");
                    busyLabel.setBusy(true);
                    isServerStarted = true;
                    busyLabel.setText("Server is running...");
                    progressBar.setVisible(false);
                    msgLabel.setVisible(false);
                }

                private void checkDatabase() throws HeadlessException {
                    try {
                        
                        DBConnection.getConnection().createStatement().executeQuery("select curdate()");
                        
                    } catch (CommunicationsException ex) {
                        System.out.println(ex.getMessage());
                        if (ex.getMessage().contains("Communications link failure")) {
                            JOptionPane.showMessageDialog(ServerStartForm.this, "Server can't find MySQL in your computer... System will exit...", "", JOptionPane.ERROR_MESSAGE);
                            System.exit(0);
                        }
                    }catch (RemoteException ex) {
                        Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (SQLException ex) {
                        Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                        if (ex.getMessage().contains("Unknown database")) {
                            Properties properties = new Properties();
                            try {

                                properties.load(new FileInputStream(new File("dbconfig.properties")));

                                properties.setProperty("dbname", JOptionPane.showInputDialog(ServerStartForm.this, ex.getMessage() + "\nDatabase Name : ", "ps"));
                                if (ex.getMessage().contains(properties.get("dbname").toString())) {
                                    /*
                                     * 
                                     * 
                                     * db restore coding......
                                     * 
                                     * 
                                     */
                                } else {
                                    File file = new File("dbconfig.properties");
                                    properties.store(new FileOutputStream(file), "");
                                }
                            } catch (FileNotFoundException ex1) {
                                Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex1);
                                try {

                                    File file = new File("dbconfig.properties");
                                    if (!file.exists()) {
                                        file.createNewFile();
                                    }
                                    properties.store(new FileOutputStream(file), "");
                                } catch (IOException ex2) {
                                    Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex2);
                                }
                            } catch (IOException ex1) {
                                Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex1);
                            }

                        } else if (ex.getMessage().contains("Access denied")) {
                            try {
                                Properties properties = new Properties();
                                properties.load(new FileInputStream(new File("dbconfig.properties")));
                                properties.setProperty("user", JOptionPane.showInputDialog(ServerStartForm.this, ex.getMessage() + " \nMySQL user : ", "root"));
                                properties.setProperty("password", JOptionPane.showInputDialog(ServerStartForm.this, "MySQL Password : "));
                                File file = new File("dbconfig.properties");

                                properties.store(new FileOutputStream(file), "");
                            } catch (IOException ex1) {
                                Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex1);
                            }
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                        Properties properties = new Properties();
                        properties.setProperty("user", JOptionPane.showInputDialog(ServerStartForm.this, "MySQL user : ", "root"));
                        properties.setProperty("password", JOptionPane.showInputDialog(ServerStartForm.this, "MySQL Password : "));
                        properties.setProperty("dbname", JOptionPane.showInputDialog(ServerStartForm.this, "Database Name : ", "ps"));
                        properties.setProperty("host", JOptionPane.showInputDialog(ServerStartForm.this, "Host : ", "localhost"));
                        try {
                            File file = new File("dbconfig.properties");
                            if (!file.exists()) {
                                file.createNewFile();
                            }
                            properties.store(new FileOutputStream(file), "");
                        } catch (IOException ex1) {
                            Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex1);
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                private void initializeRegistry() {
                    try {
                        System.setProperty("sun.rmi.transport.tcp.responseTimeout", 2 * 60 * 60 * 1000 + "");
                        if (pharmacyServerRegistry == null) {
                            pharmacyServerRegistry = LocateRegistry.createRegistry(1055);
                        }
                        pharmacyServerRegistry.rebind("PharmacyServerRemoteFactory", new RemoteFactoryImpl());
                        System.out.println("Server Started....");
                    } catch (RemoteException ex) {
                        Logger.getLogger(ServerStart.class.getName()).log(Level.SEVERE, null, ex);
                        if (ex.getMessage().contains("Port already in use")) {
                            JOptionPane.showMessageDialog(ServerStartForm.this, ex.getMessage());
                            startButton.setEnabled(true);
                            progressBar.setVisible(false);
                            msgLabel.setVisible(false);
                            throw new IllegalStateException("This is not concernable error :D");

                        }
                    }
                }
            }.start();
        } else {
            busyLabel.setBusy(false);
            busyLabel.setText("Server has stopped...");
            startButton.setText("Start");
            if (pharmacyServerRegistry != null) {
                try {
                    pharmacyServerRegistry.unbind("PharmacyServerRemoteFactory");
                } catch (RemoteException | NotBoundException ex) {
                    Logger.getLogger(ServerStartForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            isServerStarted = false;
        }

    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerStartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerStartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerStartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerStartForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ServerStartForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXBusyLabel busyLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel msgLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
